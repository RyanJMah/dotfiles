"-----------------------------------------------------------------------------------
" GLOBAL SETTINGS
syntax on
set nocompatible
set cursorline
set noerrorbells
set tabstop=4
set softtabstop=4
set sw=4
set expandtab
set smartindent
set nu
set nowrap
set noswapfile
set nobackup
set undodir=~/.vim/undo
set undofile
set incsearch
set hlsearch
set fileformat=unix
set nobinary
set encoding=UTF-8
set formatoptions=jql
set mouse=a
set guicursor+=a:blinkon1
" set ignorecase
set nomodeline

packadd termdebug
" let g:termdebugger="arm-none-eabi-gdb"
let g:termdebugger="gdb"

" detect os and set shell accordingly
let _os = system('if [[ $OSTYPE == "linux-gnu"* ]]; then echo "linux"; else echo "macos"; fi')
if _os == "linux"
    set shell=/bin/zsh
elseif _os == "macos"
    set shell=/usr/bin/zsh
endif

" Use a blinking upright bar cursor in Insert mode, a blinking block in normal
if &term == 'xterm-256color' || &term == 'screen-256color'
    let &t_SI = "\<Esc>[5 q"
    let &t_EI = "\<Esc>[1 q"
endif

" Terminal Function
let g:term_buf = 0
let g:term_win = 0
function! TermToggle(height)
    if win_gotoid(g:term_win)
        " hide
        bd!
    else
        botright new
        exec "resize" . a:height
        " botright vs new
        " vertical resize 55
        try
            exec "buffer " . g:term_buf
        catch
            call termopen($SHELL)
            " let g:term_buf = bufnr("")
            set nonumber
            " set norelativenumber
            " set signcolumn=no
        endtry
        startinsert!
        let g:term_win = win_getid()
    endif
endfunction

"-----------------------------------------------------------------------------------

"-----------------------------------------------------------------------------------
" KEYMAPINGS

" Ctrl+S to save
noremap  <silent> <C-S> :w<CR>
vnoremap <silent> <C-S> <C-C>:w<CR>
inoremap <silent> <C-S> <C-O>:w<CR>

" Ctrl+Z to undo
nnoremap <C-Z> u
inoremap <C-Z> <Esc>ui

" Ctrl+Y to redo
nnoremap <C-Y> <C-R>
inoremap <C-Y> <Esc><C-R>i

" Alt + Arrows to skip words
nnoremap <A-Left> b
nnoremap <C-Left> b
nnoremap <C-h> b
vnoremap <C-h> b
nnoremap <A-Right> e
nnoremap <C-Right> e
nnoremap <C-l> e
vnoremap <C-l> e

" buffer navigation
nnoremap bn :bn<CR>
nnoremap bp :bp<CR>
nnoremap bd :bd<CR>

" comment out line
nnoremap <C-/> :Commentary<CR>
vnoremap <C-/> :Commentary<CR>

" searching
nnoremap <C-p> :Telescope find_files hidden=true<CR>
command! Search :Telescope live_grep

" Ctrl + B to toggle nerdtree
nmap <silent> <C-B> :NERDTreeToggle<CR>

" Alt+t to toggle terminal
nnoremap <silent> <A-t> :call TermToggle(12)<CR>
inoremap <silent> <A-t> <Esc>:call TermToggle(12)<CR>
tnoremap <silent> <A-t> <C-\><C-n>:call TermToggle(12)<CR>
tnoremap <silent> <Esc> <C-\><C-n>
" tnoremap <C-W> <C-\><C-n><C-W>

" Unmap some stuff cus they're annoying
inoremap <C-A> <NOP>

"-----------------------------------------------------------------------------------

"-----------------------------------------------------------------------------------
" PLUGINS
set nocompatible
call plug#begin("~/.vim/plugged")

Plug 'RyanJMah/Ryan-VIM-Theme'                " color scheme
" Plug 'sainnhe/sonokai'                      " color scheme
" Plug 'ghifarit53/tokyonight-vim'            " color scheme
" Plug 'joshdick/onedark.vim'                 " color scheme
" Plug 'phanviet/vim-monokai-pro'             " color scheme
" Plug 'morhetz/gruvbox'                      " color scheme

" Plug 'jiangmiao/auto-pairs'                 " auto-type bracket pairs
Plug 'luochen1990/rainbow'                  " colorize bracket pairs
Plug 'preservim/nerdtree'                   " file explorer
Plug 'ryanoasis/vim-devicons'               " file icons
Plug 'vim-airline/vim-airline'              " statusline
Plug 'vim-airline/vim-airline-themes'       " statusline themes
Plug 'lukas-reineke/indent-blankline.nvim'  " indent guide
Plug 'airblade/vim-gitgutter'               " git diff
Plug 'tpope/vim-fugitive'                   " git branch for airline
Plug 'tpope/vim-commentary'                 " comment out lines

Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && npm install' }

Plug 'neoclide/coc.nvim', {'branch': 'release'}                 " autocomplete

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}     " syntax
Plug 'p00f/nvim-ts-rainbow'
Plug 'windwp/nvim-autopairs'

" language packs
" Plug 'octol/vim-cpp-enhanced-highlight'
" Plug 'sheerun/vim-polyglot'

Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'

call plug#end()
"-----------------------------------------------------------------------------------

"-----------------------------------------------------------------------------------
" COLOR SCHEME

set termguicolors
let g:sonokai_style = 'shusia'
let g:airline_theme = 'sonokai'
let g:sonokai_disable_italic_comment = 0
let g:sonokai_enable_italic = 1
colorscheme sonokai

" set termguicolors
" colorscheme tokyonight
" let g:tokyonight_style = 'night'
" let g:tokyonight_enable_italic = 1

" colorscheme gruvbox
" set bg=dark

" set termguicolors
" colorscheme monokai_pro
" let g:lightline = {
" \   'colorscheme': 'monokai_pro'
" \}

" set termguicolors
" colorscheme onedark
" let g:onedark_terminal_italics = 1
" let g:airline_theme = 'onedark'
" let g:lightline = {
" \   'colorscheme': 'onedark'
" \}
"-----------------------------------------------------------------------------------

"-----------------------------------------------------------------------------------
" TERMDEBUG SETTINGS
let g:termdebug_wide=1
"-----------------------------------------------------------------------------------

"-----------------------------------------------------------------------------------
" NERDTREE SETTINGS

" Display hidden files
let NERDTreeShowHidden=1

let g:NERDTreeSortOrder = ['foo','\/$','[[extension]]']

" Start NERDTree when Vim starts with a directory argument.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) &&
    \ !exists('s:std_in') | execute 'NERDTree' argv()[0] | wincmd p |
    \ enew | execute 'cd '.argv()[0] | endif

let NERDTreeQuitOnOpen = 1

" Exit Vim if NERDTree is the only window remaining in the only tab.
" autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" Open the existing NERDTree on each new tab.
" autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif

" Refresh on focus
autocmd BufEnter NERD_tree_* | execute 'normal R' | execute "normal R"
"-----------------------------------------------------------------------------------

"-----------------------------------------------------------------------------------
" STATUSLINE
" let g:airline_powerline_fonts = 1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#alt_sep = 0
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''

let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#hunks#enabled = 0

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_symbols.crypt = 'üîí'
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.paste = '√û'
let g:airline_symbols.paste = '‚à•'
let g:airline_symbols.spell = 'Íû®'
let g:airline_symbols.notexists = '…Ü'
let g:airline_symbols.whitespace = 'Œû'" let g:airline#extensions#tabline#formatter = 'unique_tail'

" let g:airline_left_sep = ''
" let g:airline_left_alt_sep = ''
" let g:airline_right_sep = ''
" let g:airline_right_alt_sep = ''

let g:airline_left_sep = 'ÓÇ∞'
let g:airline_left_alt_sep = 'ÓÇ±'
let g:airline_right_sep = 'ÓÇ≤'
let g:airline_right_alt_sep = 'ÓÇ≥'
let g:airline_symbols.branch = 'ÓÇ†'
let g:airline_symbols.readonly = 'ÓÇ¢'
let g:airline_symbols.colnr = ' ÓÇ£:'
let g:airline_symbols.linenr = ' ÓÇ°:'
let g:airline_symbols.maxlinenr = ' '
let g:airline_symbols.dirty=''

"-----------------------------------------------------------------------------------

"-----------------------------------------------------------------------------------
lua << EOF
require("nvim-autopairs").setup {}
EOF

lua << EOF
require'nvim-treesitter.configs'.setup {
  -- A list of parser names, or "all"
  ensure_installed = {
        "c",
        "cpp",
        "python",
        "bash",
        "dockerfile",
        "json",
        "jsonc"
    },

  -- Install parsers synchronously (only applied to `ensure_installed`)
  sync_install = false,

  highlight = {
    -- `false` will disable the whole extension
    enable = true,

    -- NOTE: these are the names of the parsers and not the filetype. (for example if you want to
    -- disable highlighting for the `tex` filetype, you need to include `latex` in this list as this is
    -- the name of the parser)
    -- list of language that will be disabled
    disable = {},

    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = true,
  },
  rainbow = {
    enable = true,
    -- disable = { "jsx", "cpp" }, list of languages you want to disable the plugin for
    extended_mode = true, -- Also highlight non-bracket delimiters like html tags, boolean or table: lang -> boolean
    max_file_lines = nil, -- Do not enable for files with more than n lines, int
    colors = {
        "#d79921", 
        "#689d6a", 
        "#d65d0e", 
        "#458588",
    }
    -- colors = {
    --     "#feb868",
    --     "#da71db",
    --     "#85c7f2"
    -- } -- table of hex strings
    -- termcolors = {} -- table of colour name strings
  }
}
EOF
hi rainbowcol1 guifg=#feb868
hi rainbowcol2 guifg=#da71db
hi rainbowcol3 guifg=#85c7f2
hi rainbowcol4 guifg=#feb868
hi rainbowcol5 guifg=#da71db
hi rainbowcol6 guifg=#85c7f2
hi rainbowcol7 guifg=#feb868
"-----------------------------------------------------------------------------------

"-----------------------------------------------------------------------------------
" Commentary
autocmd Filetype c setlocal commentstring=//\ %s
autocmd Filetype cpp setlocal commentstring=//\ %s
"-----------------------------------------------------------------------------------

"-----------------------------------------------------------------------------------
lua << EOF
require('telescope').setup{
    defaults = {
        previewer = true,
        preview_cuttoff = 10
    }
}
EOF
"-----------------------------------------------------------------------------------

"-----------------------------------------------------------------------------------
" indent blankline
lua <<EOF
require("indent_blankline").setup {
    char = "¬¶",
    buftype_exclude = {"terminal"}
}
vim.wo.colorcolumn = "99999"
EOF
"-----------------------------------------------------------------------------------

"-----------------------------------------------------------------------------------
" lmao
let g:vimsence_small_text = 'NeoVim'
let g:vimsence_small_image = 'neovim'

"-----------------------------------------------------------------------------------

"-----------------------------------------------------------------------------------
" markdown preview
 
" set default theme (dark or light)
" By default the theme is define according to the preferences of the system
let g:mkdp_theme = 'dark'
"-----------------------------------------------------------------------------------

"-----------------------------------------------------------------------------------
" autocomplete settings
" TextEdit might fail if hidden is not set.
set hidden

" Give more space for displaying messages.
" set cmdheight=2
set cmdheight=1

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
"-----------------------------------------------------------------------------------

autocmd BufWinEnter,BufNewFile,BufRead,VimEnter,FileType,OptionSet * set formatoptions=jql
autocmd BufWinEnter,BufNewFile,BufRead,VimEnter,FileType,OptionSet * setlocal formatoptions=jql
autocmd BufRead,BufNewFile project/*.c setlocal formatoptions-=cro

autocmd VimLeave,VimLeavePre * :set guicursor=n:ver100-iCursor
autocmd VimLeave,VimLeavePre * :set guicursor+=a:blinkon1

autocmd FileChangedRO * echohl WarningMsg | echo "File changed RO." | echohl None
autocmd FileChangedShell * echohl WarningMsg | echo "File changed shell." | echohl None

autocmd BufWinEnter,WinEnter term://* startinsert
" autocmd BufLeave term://* stopinsert

